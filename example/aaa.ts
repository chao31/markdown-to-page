const CONTENT =
  "# markdown-to-page\n\nLight weight react component for creating an responsive markdown page with beautiful TOC.\n\n## Features\n\n* Supports [`<HashRouter>`](https://reactrouter.com/docs/en/v6/api#hashrouter) 🔥.\n* Supports [`<BrowserRouter>`](https://reactrouter.com/docs/en/v6/api#browserrouter).\n* Auto create a table of contents 😍.\n* Responsive component 🔥.\n* Code highlighting 😍.\n* Optional support for theme.\n* Easy-to-use.\n* Thorough documentation 🎉.\n* Chinese docs 🌐.\n* High speed 🔥.\n* [Safe](https://github.com/markdown-it/markdown-it/tree/master/docs/security.md) by default.\n\n## Installation\n\n```js\nnpm install --save markdown-to-page\n```\n\nwith yarn :\n\n```js\nyarn add markdown-to-page\n```\n\n## Usage\n\nOnly `markdownText` is required.\n\n```js\nimport * as React from 'react';\nimport MarkdownPage from 'markdown-to-page';\n\nconst App = () => {\n  const md = '# your markdown text ...';\n  return <MarkdownPage markdownText={md}/>;\n};\n\nexport default App;\n```\n\n## Props\n\n|                           Name                            |               Type                | Default | Description |\n|        :-----------------------------------------:        |    :-------------------------:    | :-----: | :---------- |\n|        **[`markdownText`](#markdownText)**                |        `string`   |   `-`      | markdown text string |\n|        **[`isHashRouter`](#isHashRouter)**                |        `boolean`   |    `false`     | current route is `<HashRouter>` or not |\n|        **[`themeColor`](#themeColor)**                |        `string`   |    `#5e7ce0`     | theme color |\n|        **[`anchorId`](#anchorId)**                |        `string`   |    `_to`    | if choose `<HashRouter>`, the anchor is `?_to=xxx` |\n|        **[`markdownInstance`](#markdownInstance)**|[Markdown-it](https://www.npmjs.com/package/markdown-it)|`-`| implement a markdown parse by yourself with markdown-it  |\n\n### `markdownText`\n\nFollows the __[CommonMark spec](http://spec.commonmark.org/)__ + adds syntax extensions & sugar (URL autolinking, typographer).\n\n### `isHashRouter`\n\nUse __[`<HashRouter>`](https://reactrouter.com/docs/en/v6/api#hashrouter)__ whether or not.\n\n### `themeColor`\n\nChange the style of the page with a main color, incoming prop like `themeColor='5e7ce0'` or `themeColor='#5e7ce0'` are all OK.\n\n### `anchorId`\n\nThe default anchorId is `_to` , just like this `localhost:8080/#/page/level/?_to=custom-style`, maybe `_to` is conflict with your query, with anchorId prop to change this.\n\n### `markdownInstance`\n\nThis prop is a instance of __[Markdown-it](https://www.npmjs.com/package/markdown-it)__ , when you want to implement a markdown parse by yourself.\n\n## FAQ\n\n### Anchor don't work under `HashRouter`\n\nTo check whether `React.StrictMode` is used , `markdown-to-page` monitor URL changes by `react-router-dom`, but the usage of `useLocation` hook will fail under strict mode , just like this:\n\n```js\nimport * as React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport MarkdownPage from '../.';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nconst md = '# your markdown text ...'; \n\nconst App = () => (\n  <HashRouter>\n    <Switch>\n      <Route path=\"/\">\n        <MarkdownPage markdownText={md} isHashRouter={true} />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n```\n\nSo try to remove this nested `StrictMode` :\n\n```js\n\nroot.render(\n-  <React.StrictMode>\n    <App />\n-  </React.StrictMode>\n);\n```\n\n## Development\n\nLocal development is broken into two parts (ideally using two tabs).\n\n1. First, run rollup to watch your `src/` module and automatically recompile it into `dist/` whenever you make changes.\n\n```js\nnpm start\n```\n\n2. The second part will be running the example/ create-react-app that's linked to the local version of your module.\n\n```js\ncd example\nnpm start\n```\n\nNow, anytime you make a change to your library in `src/` or to the example app's `example/src`, `create-react-app` will live-reload your local dev server so you can iterate on your component in real-time.\n\n![](https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif)\n\n### Publishing to npm\n\n```js\nnpm publish\n```\n\n## License\n\nMIT\n";
export { CONTENT };
